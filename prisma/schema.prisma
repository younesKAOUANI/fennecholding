generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime            @default(now())
  translations CategoryTranslation[]
  products     Product[]
}

model CategoryTranslation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])
  locale     String
  name       String
  @@unique([categoryId, locale])
}

model Product {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  categoryId   String              @db.ObjectId
  category     Category            @relation(fields: [categoryId], references: [id])
  createdAt    DateTime            @default(now())
  images       String[]
  datasheet    String?
  brochure     String?
  translations ProductTranslation[]
}

model ProductTranslation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  productId      String   @db.ObjectId
  product        Product  @relation(fields: [productId], references: [id])
  locale         String
  name           String
  specifications String
  configurations String
  highlights     String[]
  @@unique([productId, locale])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}